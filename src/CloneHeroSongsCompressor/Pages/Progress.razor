@page "/progress"
@using SongsCompressor.Common.Enums;
@using SongsCompressor.Common.Interfaces;
@using SongsCompressor.Common.Models;
@inject ICompressionManager CompressionHandler;

<MudCard Class="mt-4">
    <MudCardHeader>
        <MudText Typo="Typo.h4">Progress</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudText>@_progressStatus.EngineProgress.WorkDescription</MudText>
        <MudProgressLinear Striped="true" Color="Color.Secondary" Size="Size.Medium" Value="_progressStatus.EngineProgress.PercentageComplete" Class="my-7"></MudProgressLinear>
        <MudProgressLinear Striped="true" Color="Color.Primary" Size="Size.Large" Value="_progressStatus.OverallPercentageComplete" Class="my-7">
            <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                <b>@_progressStatus.OverallPercentageComplete%</b>
            </MudText>
        </MudProgressLinear>
    </MudCardContent>
</MudCard>
<MudCard hidden="@(_progressStatus.IsComplete())" Class="mt-4">
    <MudCardContent>
        <MudText>
            Even if an application appears to be frozen, it may still be processing tasks in the background.
            <br /><br />
            After the process is complete, remember to rescan your songs library in the game.
        </MudText>
    </MudCardContent>
</MudCard>
<MudCard hidden="@(!_progressStatus.IsComplete())" Class="mt-4">
    <MudCardContent>
        <div class="d-flex flex-grow-1 gap-4">
            <div class="flex-none d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large"></MudIcon>
            </div>
            <MudText Class="flex-1">
                <MudText Typo="Typo.h6">You are all set!</MudText>
                 Remember to rescan Clone Hero's song library. You can close the application now.
            </MudText>
        </div>
    </MudCardContent>
</MudCard>

<MudFab Disabled="@(!_progressStatus.IsComplete())" Class="mt-4" OnClick="() => Close()" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" Label="Close" />

@code {
    private OverallProgressStatus _progressStatus = new OverallProgressStatus();

    private Task CheckingStatusTask;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CheckingStatusTask = CheckForStatus(CompressionHandler.Start());
        }

        await Task.CompletedTask;
    }

    private async Task CheckForStatus(Task compressionStartTask)
    {
        var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(4));

        while (!_progressStatus.IsComplete() && await periodicTimer.WaitForNextTickAsync())
        {
            _progressStatus = await CompressionHandler.GetCurrentProgressStatus();
            StateHasChanged();
        }

        periodicTimer.Dispose();
        await compressionStartTask;
    }

    private async Task Close()
    {
        await CheckingStatusTask;
        Application.Current.Quit();
    }
}
