@using SongsCompressor.Common.Consts;
@using SongsCompressor.Services.Services;
@inject IJSRuntime jsRuntime
@inject IDialogService dialogService

<MudText hidden="@(_newVersionString is not null)" Class="mr-4">
    v @_localVersion?.ToString(3)
</MudText>

<MudText hidden="@(_newVersionString is null)" Class="mr-4">
    v @_localVersion?.ToString(3)<br />
    <MudLink Target="_blank" Color="Color.Secondary" Href="@AppInfoConsts.RepositoryReleasesUrl">New Update!</MudLink>
</MudText>

@code {
    private readonly Version? _localVersion = System.Reflection.Assembly.GetEntryAssembly()?.GetName().Version;
    private string? _newVersionString = null;

    protected override void OnParametersSet()
    {
        _ = CheckForUpdatesAndShowMessage();
    }

    private async Task CheckForUpdatesAndShowMessage()
    {
        if (_localVersion == null)
            return;

        var updateChecker = new UpdateChecker(_localVersion);

        if (await updateChecker.CheckForNewGitHubVersion())
        {
            _newVersionString = updateChecker.LatestVersionString;

            StateHasChanged();

            bool? result = await dialogService.ShowMessageBox(
            new MessageBoxOptions
            {
                Title = "New version available. Would you like to go to the download page now?",
                MarkupMessage = (MarkupString)$"We have detected a newer version of the application: {_newVersionString}. <br />Your current version is {_localVersion.ToString(3)}. <br />It's always a good idea to stay up to date with the latest versions of our application as they come with enhanced stability and performance improvements.",
                YesText = "Yes",
                NoText = "No"
            },
            new DialogOptions
            {
                DisableBackdropClick = true,
            });

            if (result ?? false)
            {
                await jsRuntime.InvokeAsync<object>("open", AppInfoConsts.RepositoryReleasesUrl, "_blank");
            }
        }
    }
}