@page "/"
@using SongsCompressor.Common.Enums;
@using SongsCompressor.Common.Interfaces;
@using SongsCompressor.Common.Interfaces.Services;
@using SongsCompressor.Common.Models;
@using System.IO;
@inject NavigationManager Navigation
@inject IFolderPicker FolderPicker
@inject ICompressionManager CompressionHandler
@inject ISettingsStorage SettingsStorage;

<MudCard Class="mt-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Song Directories</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
    <MudText Class="mb-4">Provide paths to folders where your Clone Hero songs are located at</MudText>
        <MudPaper hidden="@(Settings.Directories.Count < 1)">
        <MudList>
        @foreach (var directory in Settings.Directories)
        {
            <MudListItem @key="@directory">
                <MudText Class="d-flex justify-space-between flex-grow-1 gap-4">
                      <MudText Class="align-self-center">@directory</MudText> <MudIconButton OnClick="() => RemoveFolder(directory)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                </MudText>              
            </MudListItem>
        }
        </MudList>
    </MudPaper>
    <MudButton Class="mt-6" HtmlTag="label"
        Variant="Variant.Filled"
        Color="Color.Primary"
        StartIcon="@Icons.Material.Filled.DriveFolderUpload"
        OnClick="() => PickFolders()"> Add new directory</MudButton>
    </MudCardContent>
</MudCard>

<MudCard Class="mt-4 mb-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Options</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Class="mb-4">If you're uncertain about the purpose of an option, it's best to stick with the default setting</MudText>

@*      TODO: Needs to verify is it possible to get rid of calling StateHasChanged. Without it The MudFab for moving next disabled condition will not update*@
        <MudSwitch Converter="@(new OptionsEnumConverter(OptionsEnum.ConvertPngToJpg, Settings.Options))" Color="Color.Primary" CheckedChanged="(bool e) => StateHasChanged()">Convert PNG to JPG</MudSwitch>
            <MudSwitch Class="ml-12" Disabled="!Settings.Options.Contains(OptionsEnum.ConvertPngToJpg)" Converter="@(new OptionsEnumConverter(OptionsEnum.ResizeAlbum, Settings.Options))" Color="Color.Secondary" CheckedChanged="(bool e) => StateHasChanged()">Resize album cover</MudSwitch>

        <MudSwitch Class="mt-3" Converter="@(new OptionsEnumConverter(OptionsEnum.ConvertAudioToOpus, Settings.Options))" Color="Color.Primary" CheckedChanged="(bool e) => StateHasChanged()">Convert Audio to Opus</MudSwitch>
            <MudSwitch Class="ml-12" Disabled="!Settings.Options.Contains(OptionsEnum.ConvertAudioToOpus)" Converter="@(new OptionsEnumConverter(OptionsEnum.ConvertAudioFromMp3, Settings.Options))" Color="Color.Secondary" CheckedChanged="(bool e) => StateHasChanged()">From MP3</MudSwitch>
            <MudSwitch Class="ml-12" Disabled="!Settings.Options.Contains(OptionsEnum.ConvertAudioToOpus)" Converter="@(new OptionsEnumConverter(OptionsEnum.ConvertAudioFromOgg, Settings.Options))" Color="Color.Secondary" CheckedChanged="(bool e) => StateHasChanged()">From OGG</MudSwitch>

        <MudSwitch Class="mt-3" Converter="@(new OptionsEnumConverter(OptionsEnum.CreateBackup, Settings.Options))" Color="Color.Warning" CheckedChanged="(bool e) => StateHasChanged()">Create backup</MudSwitch>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="() => Settings.Options = new UserSettings().Options" Variant="Variant.Text" Color="Color.Primary">Reset to default</MudButton>
    </MudCardActions>
</MudCard>

<MudFab OnClick="() => Start()" Disabled="Settings.Options.Count == 0 || Settings.Directories.Count == 0 || _loading" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Start" Label="Start" />


@code
{
#pragma warning disable CS8618 // No constrcutor, it's initialized in OnParameterSet
    private UserSettings Settings;
#pragma warning disable CS8618

    private bool _loading = false;

    protected override async Task OnParametersSetAsync()
    {
        Settings = await SettingsStorage.GetSettings();
    }

    private void PickFolders()
    {
        var paths = FolderPicker.PickFolders();

        foreach(var path in paths)
        {
            if (!string.IsNullOrWhiteSpace(path) && !Settings.Directories.Contains(path))
                Settings.Directories.Add(path);
        }
    }

    private void RemoveFolder(string directory)
    {
        Settings.Directories.Remove(directory);
    }

    private async Task Start()
    {
        _loading = true;
        await CompressionHandler.Initialize(Settings);
        Navigation.NavigateTo("progress");
    }

    private class OptionsEnumConverter : BoolConverter<bool>
    {
        private OptionsEnum _option;
        private readonly IList<OptionsEnum> _optionsList;

        public OptionsEnumConverter(OptionsEnum option, IList<OptionsEnum> optionsList)
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
            _option = option;
            _optionsList = optionsList;
        }

        private bool OnGet(bool? value)
        {
            try
            {
                if (value == true)
                {
                    if (!_optionsList.Contains(_option))
                        _optionsList.Add(_option);
                }


                if (value is false)
                {
                    if (_optionsList.Contains(_option))
                        _optionsList.Remove(_option);
                }

                return _optionsList.Contains(_option);
            }
            catch (Exception e)
            {
                UpdateGetError("Conversion error: " + e.Message);
                return false;
            }
        }

        private bool? OnSet(bool arg)
        {
            try
            {
                return _optionsList.Contains(_option);
            }
            catch (FormatException e)
            {
                UpdateSetError("Conversion error: " + e.Message);
                return null;
            }
        }
    }
}